<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PE Corporate Intelligence Dashboard - 2025</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif; background: linear-gradient(to bottom right, #f8fafc, #f1f5f9); }
        #root { min-height: 100vh; }
        .loading { display: flex; align-items: center; justify-content: center; height: 100vh; font-size: 1.5rem; color: #475569; }
    </style>
</head>
<body>
    <div id="root"><div class="loading">Loading Dashboard...</div></div>
    
    <script type="text/babel">
        const { useState } = React;

        // All icon components
        const Search = () => (<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.35-4.35"/></svg>);
        const Building2 = () => (<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z"/><path d="M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2"/><path d="M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2"/><path d="M10 6h4"/><path d="M10 10h4"/><path d="M10 14h4"/><path d="M10 18h4"/></svg>);
        const Scale = () => (<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="M7 21h10"/><path d="M12 3v18"/><path d="M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2"/></svg>);
        const Users = () => (<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>);
        const TrendingUp = () => (<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/><polyline points="16 7 22 7 22 13"/></svg>);
        const Globe = () => (<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="2" y1="12" x2="22" y2="12"/><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"/></svg>);
        const Database = () => (<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><ellipse cx="12" cy="5" rx="9" ry="3"/><path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"/><path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"/></svg>);
        const DollarSign = () => (<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" y1="1" x2="12" y2="23"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>);
        const Award = () => (<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="8" r="7"/><polyline points="8.21 13.89 7 23 12 20 17 23 15.79 13.88"/></svg>);
        const AlertCircle = () => (<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="8" x2="12" y2="12"/><line x1="12" y1="16" x2="12.01" y2="16"/></svg>);
        const CheckCircle = () => (<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22 4 12 14.01 9 11.01"/></svg>);
        const Clock = () => (<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><polyline points="12 6 12 12 16 14"/></svg>);
        const Star = () => (<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/></svg>);

        const App = () => {
          const [selectedCategory, setSelectedCategory] = React.useState('all');
          const [searchTerm, setSearchTerm] = React.useState('');

          const categories = [
            { id: 'financial', name: 'Financial & Business', icon: DollarSign, color: 'bg-blue-500' },
            { id: 'legal', name: 'Legal & Regulatory', icon: Scale, color: 'bg-purple-500' },
            { id: 'ip', name: 'Intellectual Property', icon: Award, color: 'bg-green-500' },
            { id: 'corporate', name: 'Corporate Records', icon: Building2, color: 'bg-orange-500' },
            { id: 'market', name: 'Market Intelligence', icon: TrendingUp, color: 'bg-red-500' },
            { id: 'people', name: 'People & Leadership', icon: Users, color: 'bg-indigo-500' },
            { id: 'media', name: 'Media & News', icon: Globe, color: 'bg-yellow-500' }
          ];

          const dataSources = [
            { category: 'financial', name: 'PitchBook', url: 'https://pitchbook.com', description: 'Comprehensive PE/VC/M&A database with valuations, deal multiples, investor networks, and EBITDA data', dataTypes: ['Financials', 'EBITDA', 'Valuations', 'Deal History', 'Investor Networks', 'Exit Data'], coverage: 'Global, strong in US/EMEA', quality: 5, currentness: 5, cost: 'High ($$$)', bestFor: 'PE/VC deal teams', lastUpdated: 'Real-time', limitations: 'High cost; mid-market coverage can be inconsistent' },
            { category: 'financial', name: 'S&P Capital IQ', url: 'https://www.spglobal.com/marketintelligence', description: 'Global company financials, credit ratings, ownership structures, and macroeconomic forecasts', dataTypes: ['Financials', 'Credit Ratings', 'Ownership', 'KPIs', 'Risk Metrics'], coverage: 'Global institutional scale', quality: 5, currentness: 5, cost: 'High ($$$)', bestFor: 'Global institutions, credit analysts', lastUpdated: 'Real-time', limitations: 'Enterprise pricing' },
            { category: 'financial', name: 'Grata', url: 'https://grata.com', description: 'Specialized in sourcing middle-market companies in fragmented or overlooked industries', dataTypes: ['Company Profiles', 'SMB/Mid-Market Data', 'Industry Segmentation', 'Contact Info'], coverage: 'US-focused, lower/middle market', quality: 4, currentness: 4, cost: 'Medium ($$)', bestFor: 'PE firms targeting lower/middle market', lastUpdated: 'Daily updates', limitations: 'Less coverage of large enterprises' },
            { category: 'financial', name: 'Crunchbase', url: 'https://www.crunchbase.com', description: 'Startup and early-stage company coverage with funding rounds and investor data', dataTypes: ['Funding Rounds', 'Investor Data', 'Startup Profiles', 'Technology Focus'], coverage: 'Global, startup-focused', quality: 4, currentness: 5, cost: 'Low-Medium ($-$$)', bestFor: 'Startup investors, innovation tracking', lastUpdated: 'Real-time community-driven', limitations: 'Limited depth on mature companies' },
            { category: 'corporate', name: 'D&B Hoovers', url: 'https://www.dnb.com/products/marketing-sales/dnb-hoovers.html', description: 'Global commercial database with 250M+ companies, DUNS numbers, credit ratings, and hierarchies', dataTypes: ['Company Profiles', 'Credit Ratings', 'DUNS Numbers', 'Hierarchies', 'Contacts', 'Financials'], coverage: 'Global - 250M+ companies', quality: 4, currentness: 3, cost: 'Medium-High ($$-$$$)', bestFor: 'Sales intelligence, credit risk', lastUpdated: 'Daily updates claimed', limitations: 'Data accuracy issues reported' },
            { category: 'corporate', name: 'ZoomInfo', url: 'https://www.zoominfo.com', description: 'B2B intelligence platform with AI-driven insights, intent data, and extensive contact database', dataTypes: ['Contact Information', 'Intent Data', 'Org Charts', 'Technology Stack', 'Buying Signals'], coverage: 'US-focused, expanding globally', quality: 4, currentness: 5, cost: 'High ($$$)', bestFor: 'Sales prospecting, marketing', lastUpdated: 'Real-time', limitations: 'Phone number accuracy issues; very expensive' },
            { category: 'legal', name: 'SEC EDGAR', url: 'https://www.sec.gov/edgar', description: 'Free public access to US public company filings including 10-K, 10-Q, 8-K, proxy statements', dataTypes: ['10-K Reports', '10-Q Reports', '8-K Filings', 'Proxy Statements', 'IPO Filings', 'Form D'], coverage: 'US public companies + some international', quality: 5, currentness: 5, cost: 'Free', bestFor: 'Public company due diligence', lastUpdated: 'Real-time as filed', limitations: 'Public companies only' },
            { category: 'legal', name: 'PACER', url: 'https://pacer.uscourts.gov', description: 'Federal court electronic records - litigation, bankruptcy, and appeals nationwide', dataTypes: ['Federal Litigation', 'Dockets', 'Court Filings', 'Bankruptcy Records', 'Case Documents'], coverage: 'All US federal courts', quality: 5, currentness: 5, cost: 'Low ($0.10/page, $30/qtr waived)', bestFor: 'Litigation research, due diligence', lastUpdated: 'Real-time', limitations: 'Pay-per-page model; interface dated' },
            { category: 'ip', name: 'USPTO PatentsView', url: 'https://patentsview.org', description: 'Comprehensive US patent database with bulk download capabilities and detailed analytics', dataTypes: ['Patent Grants', 'Patent Applications', 'Inventors', 'Assignees', 'Citations', 'Claims'], coverage: 'US patents since 1976', quality: 5, currentness: 5, cost: 'Free', bestFor: 'Patent research, IP due diligence', lastUpdated: 'Weekly', limitations: 'US patents only' },
            { category: 'market', name: 'IBISWorld', url: 'https://www.ibisworld.com', description: 'Industry research reports with market size, trends, forecasts, and competitive landscape', dataTypes: ['Industry Reports', 'Market Size', 'Trends', 'Forecasts', 'Competitive Analysis'], coverage: 'US, Global - 1,300+ industries', quality: 4, currentness: 4, cost: 'Medium-High ($$-$$$)', bestFor: 'Market sizing, industry analysis', lastUpdated: 'Monthly updates', limitations: 'Industry-level only' },
            { category: 'people', name: 'LinkedIn Sales Navigator', url: 'https://business.linkedin.com/sales-solutions', description: 'Professional network with 900M+ members - leadership identification and org charts', dataTypes: ['Professional Profiles', 'Job Titles', 'Career History', 'Connections', 'Org Changes'], coverage: 'Global - 900M+ professionals', quality: 4, currentness: 5, cost: 'Low-Medium ($-$$)', bestFor: 'Leadership research, network mapping', lastUpdated: 'Real-time user updates', limitations: 'Self-reported data' },
            { category: 'media', name: 'Wall Street Journal', url: 'https://www.wsj.com', description: 'Financial news, M&A coverage, and business intelligence with global reach', dataTypes: ['Financial News', 'M&A Announcements', 'Earnings Reports', 'Market Analysis'], coverage: 'Global', quality: 5, currentness: 5, cost: 'Low ($ subscription)', bestFor: 'Market trends, deal flow', lastUpdated: 'Real-time', limitations: 'News/analysis only' }
          ];

          const getQualityBadge = (rating) => {
            const badges = {
              5: { text: 'Excellent', color: 'bg-green-100 text-green-800' },
              4: { text: 'Very Good', color: 'bg-blue-100 text-blue-800' },
              3: { text: 'Good', color: 'bg-yellow-100 text-yellow-800' }
            };
            const badge = badges[rating] || badges[3];
            return React.createElement('span', { className: `inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${badge.color}` },
              rating >= 4 ? React.createElement(CheckCircle) : React.createElement(AlertCircle),
              badge.text
            );
          };

          const filteredSources = dataSources.filter(source => {
            const matchesCategory = selectedCategory === 'all' || source.category === selectedCategory;
            const matchesSearch = searchTerm === '' || 
              source.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
              source.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
              source.dataTypes.some(type => type.toLowerCase().includes(searchTerm.toLowerCase()));
            return matchesCategory && matchesSearch;
          });

          const getCategoryColor = (categoryId) => {
            return categories.find(c => c.id === categoryId)?.color || 'bg-gray-500';
          };

          return React.createElement('div', { className: 'min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-6' },
            React.createElement('div', { className: 'max-w-7xl mx-auto' },
              React.createElement('div', { className: 'bg-white rounded-xl shadow-lg p-8 mb-6' },
                React.createElement('div', { className: 'flex items-start justify-between mb-4' },
                  React.createElement('div', null,
                    React.createElement('h1', { className: 'text-3xl font-bold text-slate-900 mb-2' }, 'Private Equity Corporate Intelligence'),
                    React.createElement('h2', { className: 'text-xl text-slate-600 mb-4' }, 'Comprehensive Data Source Guide - 2025'),
                    React.createElement('p', { className: 'text-slate-600 max-w-4xl' }, 'Fortune 10 caliber intelligence framework for PE firms conducting due diligence on small to mid-market companies.')
                  ),
                  React.createElement(Database)
                ),
                React.createElement('div', { className: 'grid grid-cols-4 gap-4 mt-6 pt-6 border-t border-slate-200' },
                  React.createElement('div', { className: 'text-center' },
                    React.createElement('div', { className: 'text-2xl font-bold text-blue-600' }, dataSources.length),
                    React.createElement('div', { className: 'text-sm text-slate-600' }, 'Total Sources')
                  ),
                  React.createElement('div', { className: 'text-center' },
                    React.createElement('div', { className: 'text-2xl font-bold text-green-600' }, dataSources.filter(s => s.cost === 'Free').length),
                    React.createElement('div', { className: 'text-sm text-slate-600' }, 'Free Resources')
                  ),
                  React.createElement('div', { className: 'text-center' },
                    React.createElement('div', { className: 'text-2xl font-bold text-purple-600' }, dataSources.filter(s => s.quality === 5).length),
                    React.createElement('div', { className: 'text-sm text-slate-600' }, 'Premium Quality')
                  ),
                  React.createElement('div', { className: 'text-center' },
                    React.createElement('div', { className: 'text-2xl font-bold text-orange-600' }, categories.length),
                    React.createElement('div', { className: 'text-sm text-slate-600' }, 'Categories')
                  )
                )
              ),
              React.createElement('div', { className: 'bg-white rounded-xl shadow-lg p-6 mb-6' },
                React.createElement('div', { className: 'mb-4' },
                  React.createElement('label', { className: 'block text-sm font-medium text-slate-700 mb-2' }, 'Search Sources'),
                  React.createElement('div', { className: 'relative' },
                    React.createElement('div', { className: 'absolute left-3 top-3' }, React.createElement(Search)),
                    React.createElement('input', {
                      type: 'text',
                      placeholder: 'Search by name, description, or data type...',
                      className: 'w-full pl-10 pr-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent',
                      value: searchTerm,
                      onChange: (e) => setSearchTerm(e.target.value)
                    })
                  )
                ),
                React.createElement('div', null,
                  React.createElement('label', { className: 'block text-sm font-medium text-slate-700 mb-3' }, 'Filter by Category'),
                  React.createElement('div', { className: 'flex flex-wrap gap-2' },
                    React.createElement('button', {
                      onClick: () => setSelectedCategory('all'),
                      className: `px-4 py-2 rounded-lg font-medium transition-all ${selectedCategory === 'all' ? 'bg-slate-900 text-white shadow-md' : 'bg-slate-100 text-slate-700 hover:bg-slate-200'}`
                    }, `All Sources (${dataSources.length})`),
                    categories.map(cat => {
                      const Icon = cat.icon;
                      const count = dataSources.filter(s => s.category === cat.id).length;
                      return React.createElement('button', {
                        key: cat.id,
                        onClick: () => setSelectedCategory(cat.id),
                        className: `px-4 py-2 rounded-lg font-medium transition-all flex items-center gap-2 ${selectedCategory === cat.id ? `${cat.color} text-white shadow-md` : 'bg-slate-100 text-slate-700 hover:bg-slate-200'}`
                      },
                        React.createElement(Icon),
                        `${cat.name} (${count})`
                      );
                    })
                  )
                )
              ),
              React.createElement('div', { className: 'mb-4 text-slate-600' },
                'Showing ',
                React.createElement('span', { className: 'font-semibold' }, filteredSources.length),
                ' sources'
              ),
              React.createElement('div', { className: 'space-y-4' },
                filteredSources.map((source, idx) =>
                  React.createElement('div', { key: idx, className: 'bg-white rounded-xl shadow-md hover:shadow-xl transition-shadow p-6' },
                    React.createElement('div', { className: 'flex items-start justify-between mb-4' },
                      React.createElement('div', { className: 'flex-1' },
                        React.createElement('div', { className: 'flex items-center gap-3 mb-2' },
                          React.createElement('h3', { className: 'text-xl font-bold text-slate-900' }, source.name),
                          React.createElement('span', { className: `px-3 py-1 rounded-full text-xs font-medium text-white ${getCategoryColor(source.category)}` },
                            categories.find(c => c.id === source.category)?.name
                          )
                        ),
                        React.createElement('a', {
                          href: source.url,
                          target: '_blank',
                          rel: 'noopener noreferrer',
                          className: 'text-sm text-blue-600 hover:text-blue-800 hover:underline flex items-center gap-1'
                        },
                          source.url,
                          React.createElement(Globe)
                        )
                      )
                    ),
                    React.createElement('p', { className: 'text-slate-700 mb-4' }, source.description),
                    React.createElement('div', { className: 'grid grid-cols-4 gap-4 mb-4 p-4 bg-slate-50 rounded-lg' },
                      React.createElement('div', null,
                        React.createElement('div', { className: 'text-xs text-slate-600 mb-1 flex items-center gap-1' },
                          React.createElement(Star),
                          'Quality'
                        ),
                        getQualityBadge(source.quality)
                      ),
                      React.createElement('div', null,
                        React.createElement('div', { className: 'text-xs text-slate-600 mb-1 flex items-center gap-1' },
                          React.createElement(Clock),
                          'Currentness'
                        ),
                        getQualityBadge(source.currentness)
                      ),
                      React.createElement('div', null,
                        React.createElement('div', { className: 'text-xs text-slate-600 mb-1' }, 'Cost'),
                        React.createElement('span', { className: 'text-sm font-semibold text-slate-900' }, source.cost)
                      ),
                      React.createElement('div', null,
                        React.createElement('div', { className: 'text-xs text-slate-600 mb-1' }, 'Updated'),
                        React.createElement('span', { className: 'text-sm font-semibold text-slate-900' }, source.lastUpdated)
                      )
                    ),
                    React.createElement('div', { className: 'mb-4' },
                      React.createElement('div', { className: 'text-xs font-medium text-slate-600 mb-2' }, 'Data Types'),
                      React.createElement('div', { className: 'flex flex-wrap gap-2' },
                        source.dataTypes.map((type, i) =>
                          React.createElement('span', {
                            key: i,
                            className: 'px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-xs font-medium'
                          }, type)
                        )
                      )
                    ),
                    React.createElement('div', { className: 'grid grid-cols-2 gap-4 pt-4 border-t border-slate-200' },
                      React.createElement('div', null,
                        React.createElement('div', { className: 'text-xs font-medium text-slate-600 mb-1' }, 'Coverage'),
                        React.createElement('div', { className: 'text-sm text-slate-900' }, source.coverage)
                      ),
                      React.createElement('div', null,
                        React.createElement('div', { className: 'text-xs font-medium text-slate-600 mb-1' }, 'Best For'),
                        React.createElement('div', { className: 'text-sm text-slate-900' }, source.bestFor)
                      )
                    ),
                    source.limitations && React.createElement('div', { className: 'mt-4 pt-4 border-t border-slate-200' },
                      React.createElement('div', { className: 'flex items-start gap-2' },
                        React.createElement('div', { className: 'mt-0.5' }, React.createElement(AlertCircle)),
                        React.createElement('div', null,
                          React.createElement('div', { className: 'text-xs font-medium text-slate-600 mb-1' }, 'Limitations'),
                          React.createElement('div', { className: 'text-sm text-slate-700' }, source.limitations)
                        )
                      )
                    )
                  )
                )
              ),
              React.createElement('div', { className: 'mt-8 bg-gradient-to-r from-blue-600 to-blue-700 rounded-xl shadow-lg p-8 text-white' },
                React.createElement('h2', { className: 'text-2xl font-bold mb-4' }, 'Strategic Recommendations'),
                React.createElement('div', { className: 'grid md:grid-cols-2 gap-6' },
                  React.createElement('div', null,
                    React.createElement('h3', { className: 'font-semibold mb-3 flex items-center gap-2' },
                      React.createElement(CheckCircle),
                      'Essential Stack (All PE Firms)'
                    ),
                    React.createElement('ul', { className: 'space-y-2 text-sm text-blue-50' },
                      React.createElement('li', null, '• ', React.createElement('strong', null, 'LinkedIn Sales Navigator'), ' - Leadership research')
                    )
                  ),
                  React.createElement('div', null,
                    React.createElement('h3', { className: 'font-semibold mb-3 flex items-center gap-2' },
                      React.createElement(TrendingUp),
                      'Enhanced Stack (Mid-Market Focus)'
                    ),
                    React.createElement('ul', { className: 'space-y-2 text-sm text-blue-50' },
                      React.createElement('li', null, '• ', React.createElement('strong', null, 'Grata'), ' - Middle-market sourcing'),
                      React.createElement('li', null, '• ', React.createElement('strong', null, 'D&B Hoovers or ZoomInfo'), ' - Company intelligence'),
                      React.createElement('li', null, '• ', React.createElement('strong', null, 'IBISWorld'), ' - Industry analysis'),
                      React.createElement('li', null, '• ', React.createElement('strong', null, 'State Corporate Registries'), ' - Ownership verification')
                    )
                  )
                ),
                React.createElement('div', { className: 'mt-6 pt-6 border-t border-blue-500' },
                  React.createElement('h3', { className: 'font-semibold mb-3' }, 'Best Practices'),
                  React.createElement('div', { className: 'grid md:grid-cols-3 gap-4 text-sm text-blue-50' },
                    React.createElement('div', null,
                      React.createElement('strong', null, 'Multi-Source Verification'),
                      React.createElement('p', { className: 'mt-1 opacity-90' }, 'Cross-reference financial data across 3+ sources for accuracy')
                    ),
                    React.createElement('div', null,
                      React.createElement('strong', null, 'Automated Monitoring'),
                      React.createElement('p', { className: 'mt-1 opacity-90' }, 'Set up alerts in PitchBook, PACER, and news sources for target companies')
                    ),
                    React.createElement('div', null,
                      React.createElement('strong', null, 'Build Data Stack'),
                      React.createElement('p', { className: 'mt-1 opacity-90' }, 'No single database covers everything - layer complementary sources')
                    )
                  )
                )
              ),
              React.createElement('div', { className: 'mt-8 text-center text-sm text-slate-600 bg-white rounded-xl shadow-md p-6' },
                React.createElement('p', { className: 'mb-2' },
                  React.createElement('strong', null, 'Report Compiled:'), ' October 2025 | ',
                  React.createElement('strong', { className: 'ml-2' }, 'Data Sources:'), ' ', dataSources.length, ' verified platforms'
                ),
                React.createElement('p', { className: 'text-xs opacity-75' },
                  'Quality ratings based on data accuracy, coverage depth, update frequency, and user reviews. Cost indicators: $ = Under $5K/year, $ = $5K-$25K, $$ = $25K-$100K, $$ = $100K+'
                )
              )
            )
          );
        };

        // Wait for DOM to be ready, then render
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', function() {
            ReactDOM.render(React.createElement(App), document.getElementById('root'));
          });
        } else {
          ReactDOM.render(React.createElement(App), document.getElementById('root'));
        }
    </script>
</body>
</html>', null, 'PitchBook or S&P Capital IQ'), ' - Core financial intelligence'),
                      React.createElement('li', null, '• ', React.createElement('strong', null, 'SEC EDGAR'), ' - Free public company filings'),
                      React.createElement('li', null, '• ', React.createElement('strong', null, 'PACER'), ' - Federal litigation research'),
                      React.createElement('li', null, '• ', React.createElement('strong', null, 'USPTO PatentsView'), ' - IP intelligence'),
                      React.createElement('li', null, '• ', React.createElement('strong
